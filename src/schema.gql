# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  user: User!
}

type Movie {
  createdAt: DateTime
  createdBy: Float
  id: Float
  image: String
  imdb_url: String
  movie: String
  rating: Float
  updatedAt: DateTime
  updatedBy: Float
}

input MovieCreateInput {
  id: Float
  image: String
  imdb_url: String
  movie: String
  rating: Float
}

input MovieOrderByInput {
  createdAt: SortOrder
  dateOfPayment: SortOrder
  id: SortOrder
  movie: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
}

input MovieUpdateInput {
  image: String
  imdb_url: String
  movie: String
  rating: Float
}

input MovieWhereInput {
  createdAt: DateTimeNullableFilter
  id: FloatNullableFilter
  imdb_url: StringNullableFilter
  movie: StringNullableFilter
  rating: FloatNullableFilter
  updatedAt: DateTimeNullableFilter
}

input MovieWhereUniqueInput {
  id: Float!
}

type Mutation {
  createMovie(data: MovieCreateInput!): Movie!
  createRole(roleInput: RoleDto!): RoleResponse!
  createRoleDetail(roleDetailInput: RoleDetailDto!): RoleDetailResponse!
  createUserRoleMap(userRoleMapInput: UserRoleMapDto!): UserRoleMapResponse!
  login(loginInput: LoginDto!): LoginResponse!
  logout: String!
  refreshToken: String!
  register(registerInput: RegisterDto!): RegisterResponse!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie!
}

type Query {
  hello: String!
  movie(where: MovieWhereUniqueInput): Movie!
  movies(orderBy: [MovieOrderByInput!], skip: Float, take: Float = 10, where: MovieWhereInput): [Movie!]!
}

enum QueryMode {
  Default
  Insensitive
}

input RegisterDto {
  confirmPassword: String!
  email: String!
  fullName: String!
  password: String!
}

type RegisterResponse {
  user: User
}

type Role {
  createdAt: DateTime
  createdBy: Float
  id: Float
  name: String!
  updatedAt: DateTime
  updatedBy: Float
}

type RoleDetail {
  canDelete: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canWrite: Boolean!
  createdAt: DateTime
  createdBy: Float
  id: Float
  roleId: Float!
  updatedAt: DateTime
  updatedBy: Float
}

input RoleDetailDto {
  canDelete: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canWrite: Boolean!
  roleId: Float!
}

type RoleDetailResponse {
  roleDetail: RoleDetail
}

input RoleDto {
  name: String!
}

type RoleResponse {
  role: Role
}

enum SortOrder {
  Asc
  Desc
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatarUrl: String
  createdAt: DateTime
  email: String!
  fullName: String!
  id: Float
  password: String
  updatedAt: DateTime
}

type UserRoleMap {
  createdAt: DateTime
  createdBy: Float
  id: Float
  roleId: Float!
  updatedAt: DateTime
  updatedBy: Float
  userId: Float!
}

input UserRoleMapDto {
  roleId: Float!
  userId: Float!
}

type UserRoleMapResponse {
  userRoleMap: UserRoleMap
}